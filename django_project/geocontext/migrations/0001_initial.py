# Generated by Django 3.0.7 on 2020-06-07 11:51

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Key of collection.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_key', message='Key must only contains lower case or underscore.', regex='^[0-9a-z_]+$')])),
                ('name', models.CharField(help_text='Display Name of Collection.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the Collection.', null=True)),
            ],
            options={
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='CSR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Key of Context Service.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_key', message='Key must only contains lower case or underscore.', regex='^[0-9a-z_]+$')])),
                ('name', models.CharField(help_text='Name of Context Service.', max_length=200)),
                ('description', models.CharField(blank=True, help_text='Description of Context Service.', max_length=1000, null=True)),
                ('url', models.CharField(help_text='URL of Context Service.', max_length=1000)),
                ('user', models.CharField(blank=True, help_text='User name for accessing Context Service.', max_length=200, null=True)),
                ('password', models.CharField(blank=True, help_text='Password for accessing Context Service.', max_length=200, null=True)),
                ('api_key', models.CharField(blank=True, help_text='API key for accessing Context Service. For PlaceName queries this is your username.', max_length=200, null=True)),
                ('query_url', models.CharField(blank=True, help_text='Query URL for accessing Context Service.', max_length=1000, null=True)),
                ('query_type', models.CharField(choices=[('WFS', 'WFS'), ('WCS', 'WCS'), ('WMS', 'WMS'), ('REST', 'REST'), ('ArcREST', 'ArcREST'), ('Wikipedia', 'Wikipedia'), ('PlaceName', 'PlaceName')], help_text='Query type of the Context Service.', max_length=200)),
                ('result_regex', models.CharField(help_text='Regex to retrieve the desired value. Can be the data layer name. For geoserver it may be workspace:layer_name', max_length=200)),
                ('time_to_live', models.IntegerField(blank=True, default=604800, help_text='Refresh timeof the context in seconds - determines Cache persistence', null=True)),
                ('srid', models.IntegerField(blank=True, default=4326, help_text='The Spatial Reference ID of the service registry.', null=True)),
                ('search_dist', models.FloatField(blank=True, help_text='Search distance around query point in meters. Helpful for non-polygon features. Also determines cache hit range for rasters', null=True)),
                ('layer_typename', models.CharField(help_text='Layer type name to get the context.', max_length=200)),
                ('service_version', models.CharField(help_text='Version of the service (e.g. WMS 1.1.0, WFS 2.0.0).', max_length=200)),
                ('provenance', models.CharField(blank=True, help_text='The origin or source of the Context Service Registry.', max_length=1000, null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes for the Context Service Registry.', null=True)),
                ('licensing', models.CharField(blank=True, help_text='The licensing scheme for the Context Service Registry.', max_length=1000, null=True)),
            ],
            options={
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Key of group.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_key', message='Key must only contains lower case or underscore.', regex='^[0-9a-z_]+$')])),
                ('name', models.CharField(help_text='Display Name of Service.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the Group.', null=True)),
                ('group_type', models.CharField(choices=[('text', 'Text'), ('graph', 'Graph')], default='text', help_text='Type of the group to determine the UI.', max_length=10)),
                ('graphable', models.BooleanField(blank=True, default=False, help_text='Indicates if this registry returns data from which a graph can be drawn.')),
            ],
            options={
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='GroupServices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(blank=True, default=0, verbose_name='Order')),
                ('csr', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='geocontext.CSR')),
                ('group', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='geocontext.Group')),
            ],
            options={
                'unique_together': {('group', 'csr')},
            },
        ),
        migrations.AddField(
            model_name='group',
            name='csr_list',
            field=models.ManyToManyField(blank=True, help_text='List of context service registry in the context group.', through='geocontext.GroupServices', to='geocontext.CSR'),
        ),
        migrations.CreateModel(
            name='CollectionGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(blank=True, default=0, verbose_name='Order')),
                ('collection', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='geocontext.Collection')),
                ('group', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='geocontext.Group')),
            ],
            options={
                'unique_together': {('collection', 'group')},
            },
        ),
        migrations.AddField(
            model_name='collection',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='List of group in this collection.', through='geocontext.CollectionGroups', to='geocontext.Group'),
        ),
        migrations.CreateModel(
            name='Cache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of Cache Context.', max_length=200)),
                ('source_uri', models.CharField(blank=True, help_text='Source URI of the Context.', max_length=1000, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, dim=3, help_text='Geometry associated with the value. In the same srid as the service.', null=True, srid=4326)),
                ('value', models.CharField(blank=True, help_text='The value of the registry.', max_length=200, null=True)),
                ('expired_time', models.DateTimeField(help_text='Date when the cache expires.')),
                ('csr', models.ForeignKey(help_text='Service registry associated with the value.', on_delete=django.db.models.deletion.CASCADE, to='geocontext.CSR')),
            ],
        ),
    ]
