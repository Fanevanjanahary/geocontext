# Generated by Django 3.0.6 on 2020-05-31 10:22

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('geocontext', '0025_auto_20200503_1637'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of Cache Context.', max_length=200)),
                ('source_uri', models.CharField(blank=True, help_text='Source URI of the Context.', max_length=1000, null=True)),
                ('geometry_point', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='The point geometry of the query.', null=True, srid=4326)),
                ('geometry_linestring', django.contrib.gis.db.models.fields.LineStringField(blank=True, help_text='The line geometry of the context.', null=True, srid=4326)),
                ('geometry_multi_linestring', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, help_text='The multi line geometry of the context.', null=True, srid=4326)),
                ('geometry_polygon', django.contrib.gis.db.models.fields.PolygonField(blank=True, help_text='The polygon geometry of the context.', null=True, srid=4326)),
                ('geometry_multi_polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='The multi polygon geometry of the context.', null=True, srid=4326)),
                ('geometry_point_3d', django.contrib.gis.db.models.fields.PointField(blank=True, dim=3, help_text='The 3d point geometry of the query.', null=True, srid=4326)),
                ('geometry_linestring_3d', django.contrib.gis.db.models.fields.LineStringField(blank=True, dim=3, help_text='The 3d line geometry of the context.', null=True, srid=4326)),
                ('geometry_multi_linestring_3d', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, dim=3, help_text='The 3d multi line geometry of the context.', null=True, srid=4326)),
                ('geometry_polygon_3d', django.contrib.gis.db.models.fields.PolygonField(blank=True, dim=3, help_text='The 3d polygon geometry of the context.', null=True, srid=4326)),
                ('geometry_multi_polygon_3d', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=3, help_text='The 3d multi polygon geometry of the context.', null=True, srid=4326)),
                ('value', models.CharField(blank=True, help_text='The value of the registry.', max_length=200, null=True)),
                ('expired_time', models.DateTimeField(help_text='When the cache expired.')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Key of collection.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_key', message='Key must only contains lower case or underscore.', regex='^[0-9a-z_]+$')])),
                ('name', models.CharField(help_text='Display Name of Collection.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the Collection.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Key of group.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_key', message='Key must only contains lower case or underscore.', regex='^[0-9a-z_]+$')])),
                ('name', models.CharField(help_text='Display Name of Service.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the Group.', null=True)),
                ('group_type', models.CharField(choices=[('text', 'Text'), ('graph', 'Graph')], default='text', help_text='Type of the group to determine the UI.', max_length=10)),
                ('graphable', models.BooleanField(blank=True, default=False, help_text='Indicates if this registry returns data from which a graph can be drawn.')),
            ],
        ),
        migrations.CreateModel(
            name='GroupServices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(blank=True, default=0, verbose_name='Order')),
            ],
        ),
        migrations.RemoveField(
            model_name='contextcollection',
            name='context_groups',
        ),
        migrations.RemoveField(
            model_name='contextgroup',
            name='context_service_registries',
        ),
        migrations.AlterUniqueTogether(
            name='contextgroupservices',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='contextgroupservices',
            name='context_group',
        ),
        migrations.RemoveField(
            model_name='contextgroupservices',
            name='context_service_registry',
        ),
        migrations.RenameModel(
            old_name='ContextServiceRegistry',
            new_name='CSR',
        ),
        migrations.DeleteModel(
            name='ContextCache',
        ),
        migrations.DeleteModel(
            name='ContextGroupServices',
        ),
        migrations.AddField(
            model_name='groupservices',
            name='csr',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='geocontext.CSR'),
        ),
        migrations.AddField(
            model_name='groupservices',
            name='group',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='geocontext.Group'),
        ),
        migrations.AddField(
            model_name='group',
            name='csr_list',
            field=models.ManyToManyField(blank=True, help_text='List of context service registry in the context group.', through='geocontext.GroupServices', to='geocontext.CSR'),
        ),
        migrations.AddField(
            model_name='collection',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='List of group in this collection.', through='geocontext.CollectionGroups', to='geocontext.Group'),
        ),
        migrations.AddField(
            model_name='cache',
            name='csr',
            field=models.ForeignKey(help_text='Service registry where the context comes from', on_delete=django.db.models.deletion.CASCADE, to='geocontext.CSR'),
        ),
        migrations.AddField(
            model_name='collectiongroups',
            name='collection',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='geocontext.Collection'),
        ),
        migrations.AddField(
            model_name='collectiongroups',
            name='group',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='geocontext.Group'),
        ),
        migrations.AlterUniqueTogether(
            name='collectiongroups',
            unique_together={('collection', 'group')},
        ),
        migrations.AlterUniqueTogether(
            name='groupservices',
            unique_together={('group', 'csr')},
        ),
        migrations.RemoveField(
            model_name='collectiongroups',
            name='context_collection',
        ),
        migrations.RemoveField(
            model_name='collectiongroups',
            name='context_group',
        ),
        migrations.DeleteModel(
            name='ContextCollection',
        ),
        migrations.DeleteModel(
            name='ContextGroup',
        ),
    ]
